@using Beyova;
@using Beyova.ApiTracking;
@using Beyova.Api;
@model List<ApiTraceLog>

<style>
    div.bar-container {
        display: block;
        position: static;
        /*border: dotted 1px #246195;*/
        margin: 2px 0;
    }

        div.bar-container > span {
            display: block;
            color: white;
            padding: 0 5px;
            background-color: #246195;
        }

    #result div.line {
        display: table;
        width: 100%;
        padding: 2px 0;
        position: static;
        border: dotted 1px rgba(0,0,0,0);
    }

        #result div.line:hover {
            border: dotted 1px #a9ddff;
            background-color: #a9ddff;
        }

        #result div.line * {
            position: static;
            height: 20px;
        }

        #result div.line > span {
            float: left;
            position: absolute;
            z-index: 2;
            transform-style: flat;
        }

        #result div.line div.duration {
            text-align: center;
            position: relative;
            float: left;
            z-index: 1;
        }

    .major {
        box-shadow: inset 0 -1px 0 rgba(0,0,0,.15);
    }
</style>

@{
    if (Model.HasItem())
    {
        <text>
            <h1>Trace ID: @(Model.First().TraceId)</h1>
        </text>

        Model.Sort((x) => x, (a, b) =>
        {
            if (a.TraceSequence.HasValue && b.TraceSequence.HasValue)
            {
                return a.TraceSequence.Value.CompareTo(b.TraceSequence.Value);
            }
            else
            {
                var result = a.EntryStamp.Value.CompareTo(b.EntryStamp.Value);
                if (result == 0)
                {
                    result = b.ExitStamp.Value.CompareTo(a.ExitStamp.Value);
                }

                return result;
            }
        });

        DateTime? minStamp = null, maxStamp = null;
        Dictionary<ApiTraceLog, List<ApiTraceLogPiece>> pieces = new Dictionary<ApiTraceLog, List<ApiTraceLogPiece>>();

        foreach (var one in Model)
        {
            if (one.EntryStamp != null && (!minStamp.HasValue || minStamp.Value > one.EntryStamp.Value))
            {
                minStamp = one.EntryStamp.Value;
            }

            if (one.ExitStamp != null && (!maxStamp.HasValue || maxStamp.Value < one.ExitStamp.Value))
            {
                maxStamp = one.ExitStamp.Value;
            }

            pieces.Add(one, Beyova.Api.ApiTraceExtension.ToFlat(one));
        }

        if (!minStamp.HasValue || !maxStamp.HasValue || minStamp > maxStamp)
        {
            <text>
                <div class="col-lg-12">
                    <div class="panel panel-danger">
                        <div class="panel-heading">
                            <h3 class="panel-title">Trace Log has invalid time stamp</h3>
                        </div>
                        <div class="panel-body">
                            Please check raw data via list view based on Trace Log ID.
                        </div>
                    </div>
                </div>
            </text>
        }
        else
        {
            var totalTime = (maxStamp.Value - minStamp.Value).TotalMilliseconds;

            <text>
                <span>Total: @(totalTime) milliseconds</span>
            </text>

            int count = 0;
            foreach (var one in pieces)
            {
                <text>
                    <div class="bar-container">
                        <span>@(one.Key.ServiceName.SafeToString(one.Key.MethodFullName).SafeToString("<NA>"))</span>

                        @{
                            int index = 0;
                            foreach (var item in one.Value)
                            {
                                var start = (item.EntryStamp.Value - minStamp.Value).TotalMilliseconds / totalTime;
                                var startPercentage = (start * 100).ToString("0.00");
                                var durationMilliseconds = (item.ExitStamp.Value - item.EntryStamp.Value).TotalMilliseconds;
                                var width = durationMilliseconds / totalTime;
                                var widthPercentage = (width * 100).ToString("0.00");

                                <text>
                                    <div class="line" data-toggle="tooltip" data-placement="top" data-original-title="@(string.Format("{0} - {1}",item.EntryStamp.Value.ToFullDateTimeString(),item.ExitStamp.Value.ToFullDateTimeString()))">
                                        <span>@(item.MethodFullName): @(durationMilliseconds.ToString("0.00")) ms, @(width.ToString("P2"))</span>
                                        <div class="duration" style="left:@(start*100)%;width:@(width<0.01?"2px":(widthPercentage+"%")); background-color:#FBCCAA; @(index < 1 ? "box-shadow: inset 0 -1px 0 rgba(0,0,0,.15)":string.Empty)"></div>
                                    </div>
                                </text>

                                count++;
                                index++;
                            }
                        }
                    </div>
                </text>
                                    }
                                }
                            }
                            else
                            {
                                <text>
                                    <div class="col-lg-12">
                                        <div class="panel panel-danger">
                                            <div class="panel-heading">
                                                <h3 class="panel-title">Trace Log is not found</h3>
                                            </div>
                                            <div class="panel-body">
                                                Please check Trace Log ID and environment, then retry ☺
                                            </div>
                                        </div>
                                    </div>
                                </text>
                            }
}
